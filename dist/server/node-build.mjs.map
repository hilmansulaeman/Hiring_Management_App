{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/prismaClient.ts","../../server/routes/jobs.ts","../../server/routes/candidates.ts","../../server/controllers/applications.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { Router } from 'express';\nimport { DemoResponse } from \"@shared/api\";\n\nconst router = Router();\n\nrouter.get(\"/\", (_req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n});\n\nexport default router;\n","import pkg from '@prisma/client';\nconst { PrismaClient } = pkg;\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n","import { Router } from 'express';\nimport prisma from '../prismaClient';\nimport { Prisma } from '@prisma/client'; // Import Prisma namespace\n\nconst router = Router();\n\n// Get all jobs\nrouter.get('/', async (req, res) => {\n  try {\n    const jobs = await prisma.job.findMany({\n      include: {\n        applications: true,\n      },\n    });\n\n    const formattedJobs = (jobs as any[]).map(job => { // Cast to any[] to bypass type errors\n      const startedOnDate = new Date(job.createdAt);\n      const startedOnText = `started on ${startedOnDate.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}`;\n\n      return {\n        id: job.id,\n        slug: job.slug,\n        title: job.title,\n        status: job.jobStatus,\n        jobType: job.jobType,\n        salary_range: {\n          min: job.salaryMin,\n          max: job.salaryMax,\n          currency: job.currency,\n          display_text: `Rp${job.salaryMin.toLocaleString('id-ID')} - Rp${job.salaryMax.toLocaleString('id-ID')}`\n        },\n        list_card: {\n          badge: job.jobStatus.charAt(0).toUpperCase() + job.jobStatus.slice(1),\n          started_on_text: startedOnText,\n          cta: \"Manage Job\"\n        },\n        description: job.description,\n        requirements: job.requirements,\n        location: job.location,\n        company: job.company,\n        createdAt: job.createdAt,\n        updatedAt: job.updatedAt,\n        candidates: job.candidates,\n      };\n    });\n\n    res.json({ data: formattedJobs }); // Wrap in 'data' array as per user's request\n  } catch (error) {\n    console.error(\"Failed to fetch jobs:\", error);\n    res.status(500).json({ error: 'Failed to fetch jobs' });\n  }\n});\n\n// Get a single job by ID\nrouter.get('/:id', async (req, res) => {\n  const { id } = req.params;\n  console.log(`Received request for job ID: ${id}`); // Log received ID\n  try {\n    const job = await prisma.job.findUnique({\n      where: { id },\n      include: {\n        applications: true,\n      },\n    });\n    if (job) {\n      const startedOnDate = new Date(job.createdAt);\n      const startedOnText = `started on ${startedOnDate.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}`;\n\n      const formattedJob = {\n        id: job.id,\n        slug: job.slug,\n        title: job.title,\n        status: job.jobStatus,\n        jobType: job.jobType,\n        salary_range: {\n          min: job.salaryMin,\n          max: job.salaryMax,\n          currency: job.currency,\n          display_text: `Rp${job.salaryMin.toLocaleString('id-ID')} - Rp${job.salaryMax.toLocaleString('id-ID')}`\n        },\n        list_card: {\n          badge: job.jobStatus.charAt(0).toUpperCase() + job.jobStatus.slice(1),\n          started_on_text: startedOnText,\n          cta: \"Manage Job\"\n        },\n        description: job.description,\n        requirements: job.requirements,\n        location: job.location,\n        company: job.company,\n        createdAt: job.createdAt,\n        updatedAt: job.updatedAt,\n        applications: job.applications, // Keep applications as is\n      };\n      console.log(\"Found and formatted job:\", formattedJob); // Log found job\n      res.json(formattedJob);\n    } else {\n      console.log(`Job with ID ${id} not found.`); // Log job not found\n      res.status(404).json({ error: 'Job not found' });\n    }\n  } catch (error: any) { // Explicitly type error as any for full logging\n    console.error(`Failed to fetch job with ID ${id}:`, error); // Log detailed error\n    res.status(500).json({ error: 'Failed to fetch job', details: error.message });\n  }\n});\n\n// Create a new job\nrouter.post('/', async (req, res) => {\n  try {\n    const { title, description, requirements, salaryMin, salaryMax, location, jobType, jobStatus, company, slug: incomingSlug } = req.body;\n\n    let baseSlug = incomingSlug || title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');\n    let slug = baseSlug;\n    let counter = 1;\n    while (await prisma.job.findFirst({ where: { slug } })) {\n      slug = `${baseSlug}-${counter}`;\n      counter++;\n    }\n\n    const jobData: Prisma.JobCreateInput = {\n      title,\n      description,\n      requirements: requirements || \"\",\n      salaryMin: parseFloat(salaryMin) || 0.0,\n      salaryMax: parseFloat(salaryMax) || 0.0,\n      currency: \"IDR\",\n      location: location || \"Jakarta Selatan\",\n      jobType: jobType || \"full-time\",\n      jobStatus: jobStatus || \"draft\",\n      company: company || \"Rakamin\",\n      slug,\n    };\n\n    const newJob = await prisma.job.create({\n      data: jobData,\n    });\n    res.status(201).json(newJob);\n  } catch (error) {\n    console.error(\"Failed to create job:\", error);\n    res.status(500).json({ error: 'Failed to create job' });\n  }\n});\n\n// Update a job\nrouter.put('/:id', async (req, res) => {\n  const { id } = req.params;\n  const { title, description, requirements, salaryMin, salaryMax, location, jobType, jobStatus, company, slug } = req.body;\n\n  try {\n    const jobData: Prisma.JobUpdateInput = {\n      title,\n      description,\n      requirements,\n      salaryMin: parseFloat(salaryMin) || 0.0,\n      salaryMax: parseFloat(salaryMax) || 0.0,\n      location,\n      jobType,\n      jobStatus,\n      company,\n      slug,\n    };\n\n    const updatedJob = await prisma.job.update({\n      where: { id },\n      data: jobData,\n    });\n    res.json(updatedJob);\n  } catch (error) {\n    console.error(\"Failed to update job:\", error);\n    res.status(500).json({ error: 'Failed to update job' });\n  }\n});\n\n// Delete a job\nrouter.delete('/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    await prisma.job.delete({\n      where: { id },\n    });\n    res.status(204).send();\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to delete job' });\n  }\n});\n\nexport default router;\n","import { Router } from 'express';\nimport prisma from '../prismaClient';\n\nconst router = Router();\n\n// Get all candidates\nrouter.get('/', async (req, res) => {\n  try {\n    const candidates = await prisma.candidate.findMany({\n      include: {\n        job: true,\n      },\n    });\n    res.json(candidates);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch candidates' });\n  }\n});\n\n// Get a single candidate by ID\nrouter.get('/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const candidate = await prisma.candidate.findUnique({\n      where: { id },\n      include: {\n        job: true,\n      },\n    });\n    if (candidate) {\n      res.json(candidate);\n    } else {\n      res.status(404).json({ error: 'Candidate not found' });\n    }\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch candidate' });\n  }\n});\n\n// Create a new candidate\nrouter.post('/', async (req, res) => {\n  try {\n    console.log(\"Received candidate data:\", req.body); // Log incoming data\n\n    const {\n      full_name,\n      date_of_birth,\n      gender,\n      domicile,\n      phone_number,\n      email,\n      linkedin_link,\n      photo_profile,\n      jobId, // Assuming jobId is sent from the frontend\n    } = req.body;\n\n    const newCandidate = await prisma.candidate.create({\n      data: {\n        full_name,\n        date_of_birth: date_of_birth ? new Date(date_of_birth) : null,\n        gender,\n        domicile,\n        phone_number,\n        email,\n        linkedin_link,\n        photo_profile,\n        job: {\n          connect: { id: jobId },\n        },\n      },\n    });\n    res.status(201).json(newCandidate);\n  } catch (error: any) { // Explicitly type error as any for full logging\n    console.error(\"Failed to create candidate:\", error);\n    res.status(500).json({ error: 'Failed to create candidate', details: error.message }); // Include error details\n  }\n});\n\n// Update a candidate\nrouter.put('/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const updatedCandidate = await prisma.candidate.update({\n      where: { id },\n      data: req.body,\n    });\n    res.json(updatedCandidate);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to update candidate' });\n  }\n});\n\n// Delete a candidate\nrouter.delete('/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    await prisma.candidate.delete({\n      where: { id },\n    });\n    res.status(204).send();\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to delete candidate' });\n  }\n});\n\nexport default router;\n","import { Request, Response } from 'express';\nimport { z } from 'zod';\nimport prisma from '../prismaClient';\n\nconst applicationSchema = z.object({\n  fullName: z.string().min(1, 'Full name is required'),\n  email: z.string().email('Invalid email format'),\n  phone: z.string().min(10, 'Phone number must be at least 10 digits'),\n  dob: z.string().transform((str) => new Date(str)),\n  domicile: z.string().min(1, 'Domicile is required'),\n  gender: z.enum(['Female', 'Male'], { message: 'Gender must be Female or Male' }),\n  linkedin: z.string().url().regex(/linkedin\\.com/, 'LinkedIn profile must be a valid LinkedIn URL'),\n  photoUrl: z.string().optional(),\n});\n\nexport const createApplication = async (req: Request, res: Response) => {\n  const { jobId } = req.params;\n  try {\n    const validatedData = applicationSchema.parse(req.body);\n\n    const application = await prisma.application.create({\n      data: {\n        fullName: validatedData.fullName,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        dob: validatedData.dob,\n        domicile: validatedData.domicile,\n        gender: validatedData.gender,\n        linkedin: validatedData.linkedin,\n        photoUrl: validatedData.photoUrl,\n        job: {\n          connect: {\n            id: jobId,\n          },\n        },\n      },\n    });\n    res.status(201).json({ id: application.id });\n  } catch (error: any) {\n    if (error instanceof z.ZodError) {\n      const fieldErrors: { [key: string]: string } = {};\n      error.errors.forEach((err) => {\n        if (err.path.length > 0) {\n          fieldErrors[err.path[0]] = err.message;\n        }\n      });\n      return res.status(422).json({ fieldErrors });\n    }\n    res.status(500).json({ message: 'Something went wrong', error: error.message });\n  }\n};\n\nexport const listApplications = async (req: Request, res: Response) => {\n  const { jobId } = req.params;\n  const { search, page = 1, pageSize = 20, sort = '-createdAt' } = req.query;\n\n  const skip = (Number(page) - 1) * Number(pageSize);\n  const take = Number(pageSize);\n\n  const orderBy: any = {};\n  if (sort === '-createdAt') {\n    orderBy.createdAt = 'desc';\n  } else if (sort === 'createdAt') {\n    orderBy.createdAt = 'asc';\n  }\n\n  const where: any = { jobId };\n  if (search) {\n    where.OR = [\n      { fullName: { contains: String(search), mode: 'insensitive' } },\n      { email: { contains: String(search), mode: 'insensitive' } },\n      { phone: { contains: String(search), mode: 'insensitive' } },\n    ];\n  }\n\n  try {\n    const [items, total] = await prisma.$transaction([\n      prisma.application.findMany({\n        where,\n        orderBy,\n        skip,\n        take,\n      }),\n      prisma.application.count({ where }),\n    ]);\n\n    res.status(200).json({ items, total });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Something went wrong', error: error.message });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport demoRoutes from './routes/demo';\nimport jobsRoutes from './routes/jobs';\nimport candidatesRoutes from './routes/candidates';\nimport { createApplication, listApplications } from './controllers/applications';\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' })); // Increase limit for large payloads like image data\n  app.use(express.urlencoded({ extended: true, limit: '50mb' })); // Also increase for urlencoded\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.use('/api/demo', demoRoutes);\n  app.use('/api/jobs', jobsRoutes);\n  app.use('/api/candidates', candidatesRoutes);\n\n  // Application routes\n  app.post('/api/jobs/:jobId/applications', createApplication);\n  app.get('/api/jobs/:jobId/applications', listApplications);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["router","app","express","demoRoutes","jobsRoutes","candidatesRoutes"],"mappings":"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"}